// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

//nolint:dupl
package htlc

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

var exportMap = wasmlib.ScExportMap{
	Names: []string{
    	FuncInit,
    	FuncSetOwner,
    	FuncSetReceivder,
    	FuncSetSecret,
    	FuncSetTime,
    	FuncSetValue,
    	FuncTransfer,
    	FuncWithdraw,
    	ViewGetOwner,
    	ViewGetValue,
	},
	Funcs: []wasmlib.ScFuncContextFunction{
    	funcInitThunk,
    	funcSetOwnerThunk,
    	funcSetReceivderThunk,
    	funcSetSecretThunk,
    	funcSetTimeThunk,
    	funcSetValueThunk,
    	funcTransferThunk,
    	funcWithdrawThunk,
	},
	Views: []wasmlib.ScViewContextFunction{
    	viewGetOwnerThunk,
    	viewGetValueThunk,
	},
}

func OnLoad(index int32) {
	if index >= 0 {
		wasmlib.ScExportsCall(index, &exportMap)
		return
	}

	wasmlib.ScExportsExport(&exportMap)
}

type InitContext struct {
	Params  ImmutableInitParams
	State   MutablehtlcState
}

func funcInitThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcInit")
	f := &InitContext{
		Params: ImmutableInitParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	funcInit(ctx, f)
	ctx.Log("htlc.funcInit ok")
}

type SetOwnerContext struct {
	Params  ImmutableSetOwnerParams
	State   MutablehtlcState
}

func funcSetOwnerThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcSetOwner")
	f := &SetOwnerContext{
		Params: ImmutableSetOwnerParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}

	// current owner of this smart contract
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Owner().Exists(), "missing mandatory owner")
	funcSetOwner(ctx, f)
	ctx.Log("htlc.funcSetOwner ok")
}

type SetReceivderContext struct {
	Params  ImmutableSetReceivderParams
	State   MutablehtlcState
}

func funcSetReceivderThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcSetReceivder")
	f := &SetReceivderContext{
		Params: ImmutableSetReceivderParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Receivder().Exists(), "missing mandatory receivder")
	funcSetReceivder(ctx, f)
	ctx.Log("htlc.funcSetReceivder ok")
}

type SetSecretContext struct {
	Params  ImmutableSetSecretParams
	State   MutablehtlcState
}

func funcSetSecretThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcSetSecret")
	f := &SetSecretContext{
		Params: ImmutableSetSecretParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Secret().Exists(), "missing mandatory secret")
	funcSetSecret(ctx, f)
	ctx.Log("htlc.funcSetSecret ok")
}

type SetTimeContext struct {
	Params  ImmutableSetTimeParams
	State   MutablehtlcState
}

func funcSetTimeThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcSetTime")
	f := &SetTimeContext{
		Params: ImmutableSetTimeParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Time().Exists(), "missing mandatory time")
	funcSetTime(ctx, f)
	ctx.Log("htlc.funcSetTime ok")
}

type SetValueContext struct {
	Params  ImmutableSetValueParams
	State   MutablehtlcState
}

func funcSetValueThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcSetValue")
	f := &SetValueContext{
		Params: ImmutableSetValueParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	ctx.Require(f.Params.Value().Exists(), "missing mandatory value")
	funcSetValue(ctx, f)
	ctx.Log("htlc.funcSetValue ok")
}

type TransferContext struct {
	Params  ImmutableTransferParams
	State   MutablehtlcState
}

func funcTransferThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcTransfer")
	f := &TransferContext{
		Params: ImmutableTransferParams{
			proxy: wasmlib.NewParamsProxy(),
		},
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	ctx.Require(f.Params.Key().Exists(), "missing mandatory key")
	ctx.Require(f.Params.Secret().Exists(), "missing mandatory secret")
	funcTransfer(ctx, f)
	ctx.Log("htlc.funcTransfer ok")
}

type WithdrawContext struct {
	State   MutablehtlcState
}

func funcWithdrawThunk(ctx wasmlib.ScFuncContext) {
	ctx.Log("htlc.funcWithdraw")
	f := &WithdrawContext{
		State: MutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	access := f.State.Owner()
	ctx.Require(access.Exists(), "access not set: owner")
	ctx.Require(ctx.Caller() == access.Value(), "no permission")

	funcWithdraw(ctx, f)
	ctx.Log("htlc.funcWithdraw ok")
}

type GetOwnerContext struct {
	Results MutableGetOwnerResults
	State   ImmutablehtlcState
}

func viewGetOwnerThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("htlc.viewGetOwner")
	results := wasmlib.NewScDict()
	f := &GetOwnerContext{
		Results: MutableGetOwnerResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetOwner(ctx, f)
	ctx.Results(results)
	ctx.Log("htlc.viewGetOwner ok")
}

type GetValueContext struct {
	Results MutableGetValueResults
	State   ImmutablehtlcState
}

func viewGetValueThunk(ctx wasmlib.ScViewContext) {
	ctx.Log("htlc.viewGetValue")
	results := wasmlib.NewScDict()
	f := &GetValueContext{
		Results: MutableGetValueResults{
			proxy: results.AsProxy(),
		},
		State: ImmutablehtlcState{
			proxy: wasmlib.NewStateProxy(),
		},
	}
	viewGetValue(ctx, f)
	ctx.Results(results)
	ctx.Log("htlc.viewGetValue ok")
}
