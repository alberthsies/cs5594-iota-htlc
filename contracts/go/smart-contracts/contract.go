// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package htlc

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type InitCall struct {
	Func    *wasmlib.ScInitFunc
	Params  MutableInitParams
}

type SetOwnerCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetOwnerParams
}

type SetReceivderCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetReceivderParams
}

type SetSecretCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetSecretParams
}

type SetTimeCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetTimeParams
}

type SetValueCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableSetValueParams
}

type TransferCall struct {
	Func    *wasmlib.ScFunc
	Params  MutableTransferParams
}

type WithdrawCall struct {
	Func    *wasmlib.ScFunc
}

type GetOwnerCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetOwnerResults
}

type GetValueCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetValueResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) Init(ctx wasmlib.ScFuncCallContext) *InitCall {
	f := &InitCall{Func: wasmlib.NewScInitFunc(ctx, HScName, HFuncInit)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetOwner(ctx wasmlib.ScFuncCallContext) *SetOwnerCall {
	f := &SetOwnerCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetOwner)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetReceivder(ctx wasmlib.ScFuncCallContext) *SetReceivderCall {
	f := &SetReceivderCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetReceivder)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetSecret(ctx wasmlib.ScFuncCallContext) *SetSecretCall {
	f := &SetSecretCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetSecret)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetTime(ctx wasmlib.ScFuncCallContext) *SetTimeCall {
	f := &SetTimeCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetTime)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) SetValue(ctx wasmlib.ScFuncCallContext) *SetValueCall {
	f := &SetValueCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncSetValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Transfer(ctx wasmlib.ScFuncCallContext) *TransferCall {
	f := &TransferCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTransfer)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Withdraw(ctx wasmlib.ScFuncCallContext) *WithdrawCall {
	return &WithdrawCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncWithdraw)}
}

func (sc Funcs) GetOwner(ctx wasmlib.ScViewCallContext) *GetOwnerCall {
	f := &GetOwnerCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetOwner)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetValue(ctx wasmlib.ScViewCallContext) *GetValueCall {
	f := &GetValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetValue)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
