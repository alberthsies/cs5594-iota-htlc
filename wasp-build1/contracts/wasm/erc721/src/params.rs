// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableApproveParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableApproveParams {
    pub fn approved(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_APPROVED))
	}

    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableApproveParams {
	pub(crate) proxy: Proxy,
}

impl MutableApproveParams {
    pub fn approved(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_APPROVED))
	}

    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableBurnParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBurnParams {
    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableBurnParams {
	pub(crate) proxy: Proxy,
}

impl MutableBurnParams {
    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn name(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn symbol(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_SYMBOL))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    pub fn name(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_NAME))
	}

    pub fn symbol(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_SYMBOL))
	}
}

#[derive(Clone)]
pub struct ImmutableMintParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableMintParams {
    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}

    pub fn token_uri(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(PARAM_TOKEN_URI))
	}
}

#[derive(Clone)]
pub struct MutableMintParams {
	pub(crate) proxy: Proxy,
}

impl MutableMintParams {
    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}

    pub fn token_uri(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(PARAM_TOKEN_URI))
	}
}

#[derive(Clone)]
pub struct ImmutableSafeTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSafeTransferFromParams {
    pub fn data(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(PARAM_DATA))
	}

    pub fn from(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_FROM))
	}

    pub fn to(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_TO))
	}

    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableSafeTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl MutableSafeTransferFromParams {
    pub fn data(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(PARAM_DATA))
	}

    pub fn from(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_FROM))
	}

    pub fn to(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_TO))
	}

    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableSetApprovalForAllParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetApprovalForAllParams {
    pub fn approval(&self) -> ScImmutableBool {
		ScImmutableBool::new(self.proxy.root(PARAM_APPROVAL))
	}

    pub fn operator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OPERATOR))
	}
}

#[derive(Clone)]
pub struct MutableSetApprovalForAllParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetApprovalForAllParams {
    pub fn approval(&self) -> ScMutableBool {
		ScMutableBool::new(self.proxy.root(PARAM_APPROVAL))
	}

    pub fn operator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OPERATOR))
	}
}

#[derive(Clone)]
pub struct ImmutableTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTransferFromParams {
    pub fn from(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_FROM))
	}

    pub fn to(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_TO))
	}

    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableTransferFromParams {
	pub(crate) proxy: Proxy,
}

impl MutableTransferFromParams {
    pub fn from(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_FROM))
	}

    pub fn to(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_TO))
	}

    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableBalanceOfParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBalanceOfParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableBalanceOfParams {
	pub(crate) proxy: Proxy,
}

impl MutableBalanceOfParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableGetApprovedParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetApprovedParams {
    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableGetApprovedParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetApprovedParams {
    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableIsApprovedForAllParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableIsApprovedForAllParams {
    pub fn operator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OPERATOR))
	}

    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableIsApprovedForAllParams {
	pub(crate) proxy: Proxy,
}

impl MutableIsApprovedForAllParams {
    pub fn operator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OPERATOR))
	}

    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableOwnerOfParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableOwnerOfParams {
    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableOwnerOfParams {
	pub(crate) proxy: Proxy,
}

impl MutableOwnerOfParams {
    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableTokenURIParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableTokenURIParams {
    pub fn token_id(&self) -> ScImmutableHash {
		ScImmutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}

#[derive(Clone)]
pub struct MutableTokenURIParams {
	pub(crate) proxy: Proxy,
}

impl MutableTokenURIParams {
    pub fn token_id(&self) -> ScMutableHash {
		ScMutableHash::new(self.proxy.root(PARAM_TOKEN_ID))
	}
}
