// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package erc721client

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

const (
	ArgApproval = "approval"
	ArgApproved = "approved"
	ArgData     = "data"
	ArgFrom     = "from"
	ArgName     = "n"
	ArgOperator = "operator"
	ArgOwner    = "owner"
	ArgSymbol   = "s"
	ArgTo       = "to"
	ArgTokenID  = "tokenID"
	ArgTokenURI = "tokenURI"

	ResAmount   = "amount"
	ResApproval = "approval"
	ResApproved = "approved"
	ResName     = "name"
	ResOwner    = "owner"
	ResSymbol   = "symbol"
	ResTokenURI = "tokenURI"
)

///////////////////////////// approve /////////////////////////////

type ApproveFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *ApproveFunc) Approved(v wasmclient.AgentID) {
	f.args.Set(ArgApproved, f.args.FromAgentID(v))
}

func (f *ApproveFunc) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *ApproveFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgTokenID)
	return f.ClientFunc.Post(0xa0661268, &f.args)
}

///////////////////////////// burn /////////////////////////////

type BurnFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *BurnFunc) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *BurnFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgTokenID)
	return f.ClientFunc.Post(0x7bc1efb1, &f.args)
}

///////////////////////////// init /////////////////////////////

type InitFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *InitFunc) Name(v string) {
	f.args.Set(ArgName, f.args.FromString(v))
}

func (f *InitFunc) Symbol(v string) {
	f.args.Set(ArgSymbol, f.args.FromString(v))
}

func (f *InitFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgName)
	f.args.Mandatory(ArgSymbol)
	return f.ClientFunc.Post(0x1f44d644, &f.args)
}

///////////////////////////// mint /////////////////////////////

type MintFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *MintFunc) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *MintFunc) TokenURI(v string) {
	f.args.Set(ArgTokenURI, f.args.FromString(v))
}

func (f *MintFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgTokenID)
	return f.ClientFunc.Post(0xa29addcf, &f.args)
}

///////////////////////////// safeTransferFrom /////////////////////////////

type SafeTransferFromFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *SafeTransferFromFunc) Data(v []byte) {
	f.args.Set(ArgData, f.args.FromBytes(v))
}

func (f *SafeTransferFromFunc) From(v wasmclient.AgentID) {
	f.args.Set(ArgFrom, f.args.FromAgentID(v))
}

func (f *SafeTransferFromFunc) To(v wasmclient.AgentID) {
	f.args.Set(ArgTo, f.args.FromAgentID(v))
}

func (f *SafeTransferFromFunc) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *SafeTransferFromFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgFrom)
	f.args.Mandatory(ArgTo)
	f.args.Mandatory(ArgTokenID)
	return f.ClientFunc.Post(0x130ce158, &f.args)
}

///////////////////////////// setApprovalForAll /////////////////////////////

type SetApprovalForAllFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *SetApprovalForAllFunc) Approval(v bool) {
	f.args.Set(ArgApproval, f.args.FromBool(v))
}

func (f *SetApprovalForAllFunc) Operator(v wasmclient.AgentID) {
	f.args.Set(ArgOperator, f.args.FromAgentID(v))
}

func (f *SetApprovalForAllFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgApproval)
	f.args.Mandatory(ArgOperator)
	return f.ClientFunc.Post(0xb8d8c776, &f.args)
}

///////////////////////////// transferFrom /////////////////////////////

type TransferFromFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *TransferFromFunc) From(v wasmclient.AgentID) {
	f.args.Set(ArgFrom, f.args.FromAgentID(v))
}

func (f *TransferFromFunc) To(v wasmclient.AgentID) {
	f.args.Set(ArgTo, f.args.FromAgentID(v))
}

func (f *TransferFromFunc) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *TransferFromFunc) Post() wasmclient.Request {
	f.args.Mandatory(ArgFrom)
	f.args.Mandatory(ArgTo)
	f.args.Mandatory(ArgTokenID)
	return f.ClientFunc.Post(0xd5e0a602, &f.args)
}

///////////////////////////// balanceOf /////////////////////////////

type BalanceOfView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *BalanceOfView) Owner(v wasmclient.AgentID) {
	f.args.Set(ArgOwner, f.args.FromAgentID(v))
}

func (f *BalanceOfView) Call() BalanceOfResults {
	f.args.Mandatory(ArgOwner)
	f.ClientView.Call("balanceOf", &f.args)
	return BalanceOfResults{res: f.Results()}
}

type BalanceOfResults struct {
	res wasmclient.Results
}

func (r *BalanceOfResults) AmountExists() bool {
	return r.res.Exists(ResAmount)
}

func (r *BalanceOfResults) Amount() uint64 {
	return r.res.ToUint64(r.res.Get(ResAmount))
}

///////////////////////////// getApproved /////////////////////////////

type GetApprovedView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *GetApprovedView) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *GetApprovedView) Call() GetApprovedResults {
	f.args.Mandatory(ArgTokenID)
	f.ClientView.Call("getApproved", &f.args)
	return GetApprovedResults{res: f.Results()}
}

type GetApprovedResults struct {
	res wasmclient.Results
}

func (r *GetApprovedResults) ApprovedExists() bool {
	return r.res.Exists(ResApproved)
}

func (r *GetApprovedResults) Approved() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResApproved))
}

///////////////////////////// isApprovedForAll /////////////////////////////

type IsApprovedForAllView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *IsApprovedForAllView) Operator(v wasmclient.AgentID) {
	f.args.Set(ArgOperator, f.args.FromAgentID(v))
}

func (f *IsApprovedForAllView) Owner(v wasmclient.AgentID) {
	f.args.Set(ArgOwner, f.args.FromAgentID(v))
}

func (f *IsApprovedForAllView) Call() IsApprovedForAllResults {
	f.args.Mandatory(ArgOperator)
	f.args.Mandatory(ArgOwner)
	f.ClientView.Call("isApprovedForAll", &f.args)
	return IsApprovedForAllResults{res: f.Results()}
}

type IsApprovedForAllResults struct {
	res wasmclient.Results
}

func (r *IsApprovedForAllResults) ApprovalExists() bool {
	return r.res.Exists(ResApproval)
}

func (r *IsApprovedForAllResults) Approval() bool {
	return r.res.ToBool(r.res.Get(ResApproval))
}

///////////////////////////// name /////////////////////////////

type NameView struct {
	wasmclient.ClientView
}

func (f *NameView) Call() NameResults {
	f.ClientView.Call("name", nil)
	return NameResults{res: f.Results()}
}

type NameResults struct {
	res wasmclient.Results
}

func (r *NameResults) Name() string {
	return r.res.ToString(r.res.Get(ResName))
}

///////////////////////////// ownerOf /////////////////////////////

type OwnerOfView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *OwnerOfView) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *OwnerOfView) Call() OwnerOfResults {
	f.args.Mandatory(ArgTokenID)
	f.ClientView.Call("ownerOf", &f.args)
	return OwnerOfResults{res: f.Results()}
}

type OwnerOfResults struct {
	res wasmclient.Results
}

func (r *OwnerOfResults) OwnerExists() bool {
	return r.res.Exists(ResOwner)
}

func (r *OwnerOfResults) Owner() wasmclient.AgentID {
	return r.res.ToAgentID(r.res.Get(ResOwner))
}

///////////////////////////// symbol /////////////////////////////

type SymbolView struct {
	wasmclient.ClientView
}

func (f *SymbolView) Call() SymbolResults {
	f.ClientView.Call("symbol", nil)
	return SymbolResults{res: f.Results()}
}

type SymbolResults struct {
	res wasmclient.Results
}

func (r *SymbolResults) Symbol() string {
	return r.res.ToString(r.res.Get(ResSymbol))
}

///////////////////////////// tokenURI /////////////////////////////

type TokenURIView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *TokenURIView) TokenID(v wasmclient.Hash) {
	f.args.Set(ArgTokenID, f.args.FromHash(v))
}

func (f *TokenURIView) Call() TokenURIResults {
	f.args.Mandatory(ArgTokenID)
	f.ClientView.Call("tokenURI", &f.args)
	return TokenURIResults{res: f.Results()}
}

type TokenURIResults struct {
	res wasmclient.Results
}

func (r *TokenURIResults) TokenURIExists() bool {
	return r.res.Exists(ResTokenURI)
}

func (r *TokenURIResults) TokenURI() string {
	return r.res.ToString(r.res.Get(ResTokenURI))
}

///////////////////////////// Erc721Service /////////////////////////////

type Erc721Service struct {
	wasmclient.Service
}

func NewErc721Service(cl *wasmclient.ServiceClient, chainID string) (*Erc721Service, error) {
	s := &Erc721Service{}
	err := s.Service.Init(cl, chainID, 0xd967c216)
	return s, err
}

func (s *Erc721Service) NewEventHandler() *Erc721Events {
	return &Erc721Events{}
}

func (s *Erc721Service) Approve() ApproveFunc {
	return ApproveFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) Burn() BurnFunc {
	return BurnFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) Init() InitFunc {
	return InitFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) Mint() MintFunc {
	return MintFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) SafeTransferFrom() SafeTransferFromFunc {
	return SafeTransferFromFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) SetApprovalForAll() SetApprovalForAllFunc {
	return SetApprovalForAllFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) TransferFrom() TransferFromFunc {
	return TransferFromFunc{ClientFunc: s.AsClientFunc()}
}

func (s *Erc721Service) BalanceOf() BalanceOfView {
	return BalanceOfView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) GetApproved() GetApprovedView {
	return GetApprovedView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) IsApprovedForAll() IsApprovedForAllView {
	return IsApprovedForAllView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) Name() NameView {
	return NameView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) OwnerOf() OwnerOfView {
	return OwnerOfView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) Symbol() SymbolView {
	return SymbolView{ClientView: s.AsClientView()}
}

func (s *Erc721Service) TokenURI() TokenURIView {
	return TokenURIView{ClientView: s.AsClientView()}
}
