// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct MapColorToImmutableAuction {
	pub(crate) proxy: Proxy,
}

impl MapColorToImmutableAuction {
    pub fn get_auction(&self, key: &ScColor) -> ImmutableAuction {
        ImmutableAuction { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapColorToImmutableBidderList {
	pub(crate) proxy: Proxy,
}

impl MapColorToImmutableBidderList {
    pub fn get_bidder_list(&self, key: &ScColor) -> ImmutableBidderList {
        ImmutableBidderList { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapColorToImmutableBids {
	pub(crate) proxy: Proxy,
}

impl MapColorToImmutableBids {
    pub fn get_bids(&self, key: &ScColor) -> ImmutableBids {
        ImmutableBids { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ImmutableFairAuctionState {
	pub(crate) proxy: Proxy,
}

impl ImmutableFairAuctionState {
    pub fn auctions(&self) -> MapColorToImmutableAuction {
		MapColorToImmutableAuction { proxy: self.proxy.root(STATE_AUCTIONS) }
	}

    pub fn bidder_list(&self) -> MapColorToImmutableBidderList {
		MapColorToImmutableBidderList { proxy: self.proxy.root(STATE_BIDDER_LIST) }
	}

    pub fn bids(&self) -> MapColorToImmutableBids {
		MapColorToImmutableBids { proxy: self.proxy.root(STATE_BIDS) }
	}

    pub fn owner_margin(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(STATE_OWNER_MARGIN))
	}
}

#[derive(Clone)]
pub struct MapColorToMutableAuction {
	pub(crate) proxy: Proxy,
}

impl MapColorToMutableAuction {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_auction(&self, key: &ScColor) -> MutableAuction {
        MutableAuction { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapColorToMutableBidderList {
	pub(crate) proxy: Proxy,
}

impl MapColorToMutableBidderList {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bidder_list(&self, key: &ScColor) -> MutableBidderList {
        MutableBidderList { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MapColorToMutableBids {
	pub(crate) proxy: Proxy,
}

impl MapColorToMutableBids {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_bids(&self, key: &ScColor) -> MutableBids {
        MutableBids { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MutableFairAuctionState {
	pub(crate) proxy: Proxy,
}

impl MutableFairAuctionState {
    pub fn as_immutable(&self) -> ImmutableFairAuctionState {
		ImmutableFairAuctionState { proxy: self.proxy.root("") }
	}

    pub fn auctions(&self) -> MapColorToMutableAuction {
		MapColorToMutableAuction { proxy: self.proxy.root(STATE_AUCTIONS) }
	}

    pub fn bidder_list(&self) -> MapColorToMutableBidderList {
		MapColorToMutableBidderList { proxy: self.proxy.root(STATE_BIDDER_LIST) }
	}

    pub fn bids(&self) -> MapColorToMutableBids {
		MapColorToMutableBids { proxy: self.proxy.root(STATE_BIDS) }
	}

    pub fn owner_margin(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(STATE_OWNER_MARGIN))
	}
}
