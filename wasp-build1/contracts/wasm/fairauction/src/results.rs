// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableGetInfoResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetInfoResults {
    pub fn bidders(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_BIDDERS))
	}

    pub fn color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(RESULT_COLOR))
	}

    pub fn creator(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_CREATOR))
	}

    pub fn deposit(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_DEPOSIT))
	}

    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_DESCRIPTION))
	}

    pub fn duration(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_DURATION))
	}

    pub fn highest_bid(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_HIGHEST_BID))
	}

    pub fn highest_bidder(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_HIGHEST_BIDDER))
	}

    pub fn minimum_bid(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_MINIMUM_BID))
	}

    pub fn num_tokens(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_NUM_TOKENS))
	}

    pub fn owner_margin(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_OWNER_MARGIN))
	}

    pub fn when_started(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_WHEN_STARTED))
	}
}

#[derive(Clone)]
pub struct MutableGetInfoResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetInfoResults {
    pub fn bidders(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_BIDDERS))
	}

    pub fn color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(RESULT_COLOR))
	}

    pub fn creator(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_CREATOR))
	}

    pub fn deposit(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_DEPOSIT))
	}

    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_DESCRIPTION))
	}

    pub fn duration(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_DURATION))
	}

    pub fn highest_bid(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_HIGHEST_BID))
	}

    pub fn highest_bidder(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_HIGHEST_BIDDER))
	}

    pub fn minimum_bid(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_MINIMUM_BID))
	}

    pub fn num_tokens(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_NUM_TOKENS))
	}

    pub fn owner_margin(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_OWNER_MARGIN))
	}

    pub fn when_started(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_WHEN_STARTED))
	}
}
