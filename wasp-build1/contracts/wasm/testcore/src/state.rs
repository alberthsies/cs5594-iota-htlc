// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ImmutableTestCoreState {
	pub(crate) proxy: Proxy,
}

impl ImmutableTestCoreState {
    pub fn counter(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(STATE_COUNTER))
	}

    pub fn hname_ep(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(STATE_HNAME_EP))
	}

    pub fn ints(&self) -> MapStringToImmutableInt64 {
		MapStringToImmutableInt64 { proxy: self.proxy.root(STATE_INTS) }
	}

    pub fn minted_color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(STATE_MINTED_COLOR))
	}

    pub fn minted_supply(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(STATE_MINTED_SUPPLY))
	}
}

#[derive(Clone)]
pub struct MutableTestCoreState {
	pub(crate) proxy: Proxy,
}

impl MutableTestCoreState {
    pub fn as_immutable(&self) -> ImmutableTestCoreState {
		ImmutableTestCoreState { proxy: self.proxy.root("") }
	}

    pub fn counter(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(STATE_COUNTER))
	}

    pub fn hname_ep(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(STATE_HNAME_EP))
	}

    pub fn ints(&self) -> MapStringToMutableInt64 {
		MapStringToMutableInt64 { proxy: self.proxy.root(STATE_INTS) }
	}

    pub fn minted_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(STATE_MINTED_COLOR))
	}

    pub fn minted_supply(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(STATE_MINTED_SUPPLY))
	}
}
