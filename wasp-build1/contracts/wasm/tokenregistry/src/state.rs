// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;

use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableColor {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableColor {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_color(&self, index: u32) -> ScImmutableColor {
        ScImmutableColor::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapColorToImmutableToken {
	pub(crate) proxy: Proxy,
}

impl MapColorToImmutableToken {
    pub fn get_token(&self, key: &ScColor) -> ImmutableToken {
        ImmutableToken { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct ImmutableTokenRegistryState {
	pub(crate) proxy: Proxy,
}

impl ImmutableTokenRegistryState {
    pub fn color_list(&self) -> ArrayOfImmutableColor {
		ArrayOfImmutableColor { proxy: self.proxy.root(STATE_COLOR_LIST) }
	}

    pub fn registry(&self) -> MapColorToImmutableToken {
		MapColorToImmutableToken { proxy: self.proxy.root(STATE_REGISTRY) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableColor {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableColor {
	pub fn append_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_color(&self, index: u32) -> ScMutableColor {
        ScMutableColor::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MapColorToMutableToken {
	pub(crate) proxy: Proxy,
}

impl MapColorToMutableToken {
    pub fn clear(&self) {
        self.proxy.clear_map();
    }

    pub fn get_token(&self, key: &ScColor) -> MutableToken {
        MutableToken { proxy: self.proxy.key(&color_to_bytes(key)) }
    }
}

#[derive(Clone)]
pub struct MutableTokenRegistryState {
	pub(crate) proxy: Proxy,
}

impl MutableTokenRegistryState {
    pub fn as_immutable(&self) -> ImmutableTokenRegistryState {
		ImmutableTokenRegistryState { proxy: self.proxy.root("") }
	}

    pub fn color_list(&self) -> ArrayOfMutableColor {
		ArrayOfMutableColor { proxy: self.proxy.root(STATE_COLOR_LIST) }
	}

    pub fn registry(&self) -> MapColorToMutableToken {
		MapColorToMutableToken { proxy: self.proxy.root(STATE_REGISTRY) }
	}
}
