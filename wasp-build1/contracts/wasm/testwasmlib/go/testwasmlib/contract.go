// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package testwasmlib

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmlib"

type ArrayAppendCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayAppendParams
}

type ArrayClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArrayClearParams
}

type ArraySetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableArraySetParams
}

type MapClearCall struct {
	Func   *wasmlib.ScFunc
	Params MutableMapClearParams
}

type MapSetCall struct {
	Func   *wasmlib.ScFunc
	Params MutableMapSetParams
}

type ParamTypesCall struct {
	Func   *wasmlib.ScFunc
	Params MutableParamTypesParams
}

type RandomCall struct {
	Func *wasmlib.ScFunc
}

type TriggerEventCall struct {
	Func   *wasmlib.ScFunc
	Params MutableTriggerEventParams
}

type ArrayLengthCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayLengthParams
	Results ImmutableArrayLengthResults
}

type ArrayValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableArrayValueParams
	Results ImmutableArrayValueResults
}

type BlockRecordCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordParams
	Results ImmutableBlockRecordResults
}

type BlockRecordsCall struct {
	Func    *wasmlib.ScView
	Params  MutableBlockRecordsParams
	Results ImmutableBlockRecordsResults
}

type GetRandomCall struct {
	Func    *wasmlib.ScView
	Results ImmutableGetRandomResults
}

type IotaBalanceCall struct {
	Func    *wasmlib.ScView
	Results ImmutableIotaBalanceResults
}

type MapValueCall struct {
	Func    *wasmlib.ScView
	Params  MutableMapValueParams
	Results ImmutableMapValueResults
}

type Funcs struct{}

var ScFuncs Funcs

func (sc Funcs) ArrayAppend(ctx wasmlib.ScFuncCallContext) *ArrayAppendCall {
	f := &ArrayAppendCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayAppend)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayClear(ctx wasmlib.ScFuncCallContext) *ArrayClearCall {
	f := &ArrayClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArrayClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArraySet(ctx wasmlib.ScFuncCallContext) *ArraySetCall {
	f := &ArraySetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncArraySet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapClear(ctx wasmlib.ScFuncCallContext) *MapClearCall {
	f := &MapClearCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapClear)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) MapSet(ctx wasmlib.ScFuncCallContext) *MapSetCall {
	f := &MapSetCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncMapSet)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ParamTypes(ctx wasmlib.ScFuncCallContext) *ParamTypesCall {
	f := &ParamTypesCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncParamTypes)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) Random(ctx wasmlib.ScFuncCallContext) *RandomCall {
	return &RandomCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncRandom)}
}

func (sc Funcs) TriggerEvent(ctx wasmlib.ScFuncCallContext) *TriggerEventCall {
	f := &TriggerEventCall{Func: wasmlib.NewScFunc(ctx, HScName, HFuncTriggerEvent)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(&f.Func.ScView)
	return f
}

func (sc Funcs) ArrayLength(ctx wasmlib.ScViewCallContext) *ArrayLengthCall {
	f := &ArrayLengthCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayLength)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) ArrayValue(ctx wasmlib.ScViewCallContext) *ArrayValueCall {
	f := &ArrayValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewArrayValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecord(ctx wasmlib.ScViewCallContext) *BlockRecordCall {
	f := &BlockRecordCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecord)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) BlockRecords(ctx wasmlib.ScViewCallContext) *BlockRecordsCall {
	f := &BlockRecordsCall{Func: wasmlib.NewScView(ctx, HScName, HViewBlockRecords)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) GetRandom(ctx wasmlib.ScViewCallContext) *GetRandomCall {
	f := &GetRandomCall{Func: wasmlib.NewScView(ctx, HScName, HViewGetRandom)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) IotaBalance(ctx wasmlib.ScViewCallContext) *IotaBalanceCall {
	f := &IotaBalanceCall{Func: wasmlib.NewScView(ctx, HScName, HViewIotaBalance)}
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}

func (sc Funcs) MapValue(ctx wasmlib.ScViewCallContext) *MapValueCall {
	f := &MapValueCall{Func: wasmlib.NewScView(ctx, HScName, HViewMapValue)}
	f.Params.proxy = wasmlib.NewCallParamsProxy(f.Func)
	wasmlib.NewCallResultsProxy(f.Func, &f.Results.proxy)
	return f
}
