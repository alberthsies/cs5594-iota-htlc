// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayLengthResults {
    pub fn length(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct MutableArrayLengthResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayLengthResults {
    pub fn length(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_LENGTH))
	}
}

#[derive(Clone)]
pub struct ImmutableArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableArrayValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableArrayValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableArrayValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordResults {
    pub fn record(&self) -> ScImmutableBytes {
		ScImmutableBytes::new(self.proxy.root(RESULT_RECORD))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordResults {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordResults {
    pub fn record(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.root(RESULT_RECORD))
	}
}

#[derive(Clone)]
pub struct ImmutableBlockRecordsResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableBlockRecordsResults {
    pub fn count(&self) -> ScImmutableUint32 {
		ScImmutableUint32::new(self.proxy.root(RESULT_COUNT))
	}
}

#[derive(Clone)]
pub struct MutableBlockRecordsResults {
	pub(crate) proxy: Proxy,
}

impl MutableBlockRecordsResults {
    pub fn count(&self) -> ScMutableUint32 {
		ScMutableUint32::new(self.proxy.root(RESULT_COUNT))
	}
}

#[derive(Clone)]
pub struct ImmutableGetRandomResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetRandomResults {
    pub fn random(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_RANDOM))
	}
}

#[derive(Clone)]
pub struct MutableGetRandomResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetRandomResults {
    pub fn random(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_RANDOM))
	}
}

#[derive(Clone)]
pub struct ImmutableIotaBalanceResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableIotaBalanceResults {
    pub fn iotas(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct MutableIotaBalanceResults {
	pub(crate) proxy: Proxy,
}

impl MutableIotaBalanceResults {
    pub fn iotas(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(RESULT_IOTAS))
	}
}

#[derive(Clone)]
pub struct ImmutableMapValueResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableMapValueResults {
    pub fn value(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_VALUE))
	}
}

#[derive(Clone)]
pub struct MutableMapValueResults {
	pub(crate) proxy: Proxy,
}

impl MutableMapValueResults {
    pub fn value(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_VALUE))
	}
}
