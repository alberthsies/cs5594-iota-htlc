// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use wasmlib::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableInitParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableInitParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableInitParams {
	pub(crate) proxy: Proxy,
}

impl MutableInitParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableMemberParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableMemberParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn factor(&self) -> ScImmutableUint64 {
		ScImmutableUint64::new(self.proxy.root(PARAM_FACTOR))
	}
}

#[derive(Clone)]
pub struct MutableMemberParams {
	pub(crate) proxy: Proxy,
}

impl MutableMemberParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}

    pub fn factor(&self) -> ScMutableUint64 {
		ScMutableUint64::new(self.proxy.root(PARAM_FACTOR))
	}
}

#[derive(Clone)]
pub struct ImmutableSetOwnerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetOwnerParams {
    pub fn owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableSetOwnerParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetOwnerParams {
    pub fn owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableGetFactorParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetFactorParams {
    pub fn address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableGetFactorParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetFactorParams {
    pub fn address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_ADDRESS))
	}
}
