// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class DivideCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDivide);
}

export class DivideContext {
	state: sc.MutableDividendState = new sc.MutableDividendState(wasmlib.ScState.proxy());
}

export class InitCall {
	func: wasmlib.ScInitFunc = new wasmlib.ScInitFunc(sc.HScName, sc.HFuncInit);
	params: sc.MutableInitParams = new sc.MutableInitParams(wasmlib.ScView.nilProxy);
}

export class InitContext {
	params: sc.ImmutableInitParams = new sc.ImmutableInitParams(wasmlib.paramsProxy());
	state: sc.MutableDividendState = new sc.MutableDividendState(wasmlib.ScState.proxy());
}

export class MemberCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncMember);
	params: sc.MutableMemberParams = new sc.MutableMemberParams(wasmlib.ScView.nilProxy);
}

export class MemberContext {
	params: sc.ImmutableMemberParams = new sc.ImmutableMemberParams(wasmlib.paramsProxy());
	state: sc.MutableDividendState = new sc.MutableDividendState(wasmlib.ScState.proxy());
}

export class SetOwnerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetOwner);
	params: sc.MutableSetOwnerParams = new sc.MutableSetOwnerParams(wasmlib.ScView.nilProxy);
}

export class SetOwnerContext {
	params: sc.ImmutableSetOwnerParams = new sc.ImmutableSetOwnerParams(wasmlib.paramsProxy());
	state: sc.MutableDividendState = new sc.MutableDividendState(wasmlib.ScState.proxy());
}

export class GetFactorCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetFactor);
	params: sc.MutableGetFactorParams = new sc.MutableGetFactorParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetFactorResults = new sc.ImmutableGetFactorResults(wasmlib.ScView.nilProxy);
}

export class GetFactorContext {
	params: sc.ImmutableGetFactorParams = new sc.ImmutableGetFactorParams(wasmlib.paramsProxy());
	results: sc.MutableGetFactorResults = new sc.MutableGetFactorResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableDividendState = new sc.ImmutableDividendState(wasmlib.ScState.proxy());
}

export class GetOwnerCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetOwner);
	results: sc.ImmutableGetOwnerResults = new sc.ImmutableGetOwnerResults(wasmlib.ScView.nilProxy);
}

export class GetOwnerContext {
	results: sc.MutableGetOwnerResults = new sc.MutableGetOwnerResults(wasmlib.ScView.nilProxy);
	state: sc.ImmutableDividendState = new sc.ImmutableDividendState(wasmlib.ScState.proxy());
}

export class ScFuncs {
	static divide(_ctx: wasmlib.ScFuncCallContext): DivideCall {
		return new DivideCall();
	}

	static init(_ctx: wasmlib.ScFuncCallContext): InitCall {
		const f = new InitCall();
		f.params = new sc.MutableInitParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static member(_ctx: wasmlib.ScFuncCallContext): MemberCall {
		const f = new MemberCall();
		f.params = new sc.MutableMemberParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setOwner(_ctx: wasmlib.ScFuncCallContext): SetOwnerCall {
		const f = new SetOwnerCall();
		f.params = new sc.MutableSetOwnerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getFactor(_ctx: wasmlib.ScViewCallContext): GetFactorCall {
		const f = new GetFactorCall();
		f.params = new sc.MutableGetFactorParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetFactorResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getOwner(_ctx: wasmlib.ScViewCallContext): GetOwnerCall {
		const f = new GetOwnerCall();
		f.results = new sc.ImmutableGetOwnerResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
