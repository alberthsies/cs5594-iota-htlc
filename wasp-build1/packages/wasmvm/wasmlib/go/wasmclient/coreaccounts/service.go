// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

package coreaccountsclient

import "github.com/iotaledger/wasp/packages/wasmvm/wasmlib/go/wasmclient"

const (
	ArgAgentID        = "a"
	ArgWithdrawAmount = "m"
	ArgWithdrawColor  = "c"

	ResAccountNonce = "n"
	ResAgents       = "this"
	ResBalances     = "this"
)

///////////////////////////// deposit /////////////////////////////

type DepositFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *DepositFunc) AgentID(v wasmclient.AgentID) {
	f.args.Set(ArgAgentID, f.args.FromAgentID(v))
}

func (f *DepositFunc) Post() wasmclient.Request {
	return f.ClientFunc.Post(0xbdc9102d, &f.args)
}

///////////////////////////// harvest /////////////////////////////

type HarvestFunc struct {
	wasmclient.ClientFunc
	args wasmclient.Arguments
}

func (f *HarvestFunc) WithdrawAmount(v int64) {
	f.args.Set(ArgWithdrawAmount, f.args.FromInt64(v))
}

func (f *HarvestFunc) WithdrawColor(v wasmclient.Color) {
	f.args.Set(ArgWithdrawColor, f.args.FromColor(v))
}

func (f *HarvestFunc) Post() wasmclient.Request {
	return f.ClientFunc.Post(0x7b40efbd, &f.args)
}

///////////////////////////// withdraw /////////////////////////////

type WithdrawFunc struct {
	wasmclient.ClientFunc
}

func (f *WithdrawFunc) Post() wasmclient.Request {
	return f.ClientFunc.Post(0x9dcc0f41, nil)
}

///////////////////////////// accounts /////////////////////////////

type AccountsView struct {
	wasmclient.ClientView
}

func (f *AccountsView) Call() AccountsResults {
	f.ClientView.Call("accounts", nil)
	return AccountsResults{res: f.Results()}
}

type AccountsResults struct {
	res wasmclient.Results
}

func (r *AccountsResults) Agents() map[wasmclient.AgentID][]byte {
	res := make(map[wasmclient.AgentID][]byte)
	r.res.ForEach(func(key []byte, val []byte) {
		res[r.res.ToAgentID(key)] = r.res.ToBytes(val)
	})
	return res
}

///////////////////////////// balance /////////////////////////////

type BalanceView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *BalanceView) AgentID(v wasmclient.AgentID) {
	f.args.Set(ArgAgentID, f.args.FromAgentID(v))
}

func (f *BalanceView) Call() BalanceResults {
	f.args.Mandatory(ArgAgentID)
	f.ClientView.Call("balance", &f.args)
	return BalanceResults{res: f.Results()}
}

type BalanceResults struct {
	res wasmclient.Results
}

func (r *BalanceResults) Balances() map[wasmclient.Color]int64 {
	res := make(map[wasmclient.Color]int64)
	r.res.ForEach(func(key []byte, val []byte) {
		res[r.res.ToColor(key)] = r.res.ToInt64(val)
	})
	return res
}

///////////////////////////// getAccountNonce /////////////////////////////

type GetAccountNonceView struct {
	wasmclient.ClientView
	args wasmclient.Arguments
}

func (f *GetAccountNonceView) AgentID(v wasmclient.AgentID) {
	f.args.Set(ArgAgentID, f.args.FromAgentID(v))
}

func (f *GetAccountNonceView) Call() GetAccountNonceResults {
	f.args.Mandatory(ArgAgentID)
	f.ClientView.Call("getAccountNonce", &f.args)
	return GetAccountNonceResults{res: f.Results()}
}

type GetAccountNonceResults struct {
	res wasmclient.Results
}

func (r *GetAccountNonceResults) AccountNonce() int64 {
	return r.res.ToInt64(r.res.Get(ResAccountNonce))
}

///////////////////////////// totalAssets /////////////////////////////

type TotalAssetsView struct {
	wasmclient.ClientView
}

func (f *TotalAssetsView) Call() TotalAssetsResults {
	f.ClientView.Call("totalAssets", nil)
	return TotalAssetsResults{res: f.Results()}
}

type TotalAssetsResults struct {
	res wasmclient.Results
}

func (r *TotalAssetsResults) Balances() map[wasmclient.Color]int64 {
	res := make(map[wasmclient.Color]int64)
	r.res.ForEach(func(key []byte, val []byte) {
		res[r.res.ToColor(key)] = r.res.ToInt64(val)
	})
	return res
}

///////////////////////////// CoreAccountsService /////////////////////////////

type CoreAccountsService struct {
	wasmclient.Service
}

func NewCoreAccountsService(cl *wasmclient.ServiceClient, chainID string) (*CoreAccountsService, error) {
	s := &CoreAccountsService{}
	err := s.Service.Init(cl, chainID, 0x3c4b5e02)
	return s, err
}

func (s *CoreAccountsService) Deposit() DepositFunc {
	return DepositFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreAccountsService) Harvest() HarvestFunc {
	return HarvestFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreAccountsService) Withdraw() WithdrawFunc {
	return WithdrawFunc{ClientFunc: s.AsClientFunc()}
}

func (s *CoreAccountsService) Accounts() AccountsView {
	return AccountsView{ClientView: s.AsClientView()}
}

func (s *CoreAccountsService) Balance() BalanceView {
	return BalanceView{ClientView: s.AsClientView()}
}

func (s *CoreAccountsService) GetAccountNonce() GetAccountNonceView {
	return GetAccountNonceView{ClientView: s.AsClientView()}
}

func (s *CoreAccountsService) TotalAssets() TotalAssetsView {
	return TotalAssetsView{ClientView: s.AsClientView()}
}
