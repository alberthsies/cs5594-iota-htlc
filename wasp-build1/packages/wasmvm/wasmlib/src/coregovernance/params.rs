// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::coregovernance::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableAddAllowedStateControllerAddressParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableAddAllowedStateControllerAddressParams {
    pub fn chain_owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
	}

    pub fn fee_color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(PARAM_FEE_COLOR))
	}

    pub fn state_controller_address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableAddAllowedStateControllerAddressParams {
	pub(crate) proxy: Proxy,
}

impl MutableAddAllowedStateControllerAddressParams {
    pub fn chain_owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
	}

    pub fn fee_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(PARAM_FEE_COLOR))
	}

    pub fn state_controller_address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct ImmutableDelegateChainOwnershipParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableDelegateChainOwnershipParams {
    pub fn chain_owner(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
	}
}

#[derive(Clone)]
pub struct MutableDelegateChainOwnershipParams {
	pub(crate) proxy: Proxy,
}

impl MutableDelegateChainOwnershipParams {
    pub fn chain_owner(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_CHAIN_OWNER))
	}
}

#[derive(Clone)]
pub struct ImmutableRemoveAllowedStateControllerAddressParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableRemoveAllowedStateControllerAddressParams {
    pub fn state_controller_address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableRemoveAllowedStateControllerAddressParams {
	pub(crate) proxy: Proxy,
}

impl MutableRemoveAllowedStateControllerAddressParams {
    pub fn state_controller_address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct ImmutableRotateStateControllerParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableRotateStateControllerParams {
    pub fn state_controller_address(&self) -> ScImmutableAddress {
		ScImmutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct MutableRotateStateControllerParams {
	pub(crate) proxy: Proxy,
}

impl MutableRotateStateControllerParams {
    pub fn state_controller_address(&self) -> ScMutableAddress {
		ScMutableAddress::new(self.proxy.root(PARAM_STATE_CONTROLLER_ADDRESS))
	}
}

#[derive(Clone)]
pub struct ImmutableSetChainInfoParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetChainInfoParams {
    pub fn max_blob_size(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(PARAM_MAX_BLOB_SIZE))
	}

    pub fn max_event_size(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.proxy.root(PARAM_MAX_EVENT_SIZE))
	}

    pub fn max_events_per_req(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.proxy.root(PARAM_MAX_EVENTS_PER_REQ))
	}

    pub fn owner_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct MutableSetChainInfoParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetChainInfoParams {
    pub fn max_blob_size(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(PARAM_MAX_BLOB_SIZE))
	}

    pub fn max_event_size(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.proxy.root(PARAM_MAX_EVENT_SIZE))
	}

    pub fn max_events_per_req(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.proxy.root(PARAM_MAX_EVENTS_PER_REQ))
	}

    pub fn owner_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct ImmutableSetContractFeeParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetContractFeeParams {
    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn owner_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct MutableSetContractFeeParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetContractFeeParams {
    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME))
	}

    pub fn owner_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct ImmutableSetDefaultFeeParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableSetDefaultFeeParams {
    pub fn owner_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct MutableSetDefaultFeeParams {
	pub(crate) proxy: Proxy,
}

impl MutableSetDefaultFeeParams {
    pub fn owner_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct ImmutableGetFeeInfoParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetFeeInfoParams {
    pub fn hname(&self) -> ScImmutableHname {
		ScImmutableHname::new(self.proxy.root(PARAM_HNAME))
	}
}

#[derive(Clone)]
pub struct MutableGetFeeInfoParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetFeeInfoParams {
    pub fn hname(&self) -> ScMutableHname {
		ScMutableHname::new(self.proxy.root(PARAM_HNAME))
	}
}
