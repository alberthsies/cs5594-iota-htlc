// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::coregovernance::*;
use crate::*;

#[derive(Clone)]
pub struct ArrayOfImmutableBytes {
	pub(crate) proxy: Proxy,
}

impl ArrayOfImmutableBytes {
    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_bytes(&self, index: u32) -> ScImmutableBytes {
        ScImmutableBytes::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct ImmutableGetAllowedStateControllerAddressesResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetAllowedStateControllerAddressesResults {
    pub fn allowed_state_controller_addresses(&self) -> ArrayOfImmutableBytes {
		ArrayOfImmutableBytes { proxy: self.proxy.root(RESULT_ALLOWED_STATE_CONTROLLER_ADDRESSES) }
	}
}

#[derive(Clone)]
pub struct ArrayOfMutableBytes {
	pub(crate) proxy: Proxy,
}

impl ArrayOfMutableBytes {
	pub fn append_bytes(&self) -> ScMutableBytes {
		ScMutableBytes::new(self.proxy.append())
	}

	pub fn clear(&self) {
        self.proxy.clear_array();
    }

    pub fn length(&self) -> u32 {
        self.proxy.length()
    }

    pub fn get_bytes(&self, index: u32) -> ScMutableBytes {
        ScMutableBytes::new(self.proxy.index(index))
    }
}

#[derive(Clone)]
pub struct MutableGetAllowedStateControllerAddressesResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetAllowedStateControllerAddressesResults {
    pub fn allowed_state_controller_addresses(&self) -> ArrayOfMutableBytes {
		ArrayOfMutableBytes { proxy: self.proxy.root(RESULT_ALLOWED_STATE_CONTROLLER_ADDRESSES) }
	}
}

#[derive(Clone)]
pub struct ImmutableGetChainInfoResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetChainInfoResults {
    pub fn chain_id(&self) -> ScImmutableChainID {
		ScImmutableChainID::new(self.proxy.root(RESULT_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(RESULT_CHAIN_OWNER_ID))
	}

    pub fn default_owner_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(RESULT_DEFAULT_OWNER_FEE))
	}

    pub fn default_validator_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(RESULT_DEFAULT_VALIDATOR_FEE))
	}

    pub fn description(&self) -> ScImmutableString {
		ScImmutableString::new(self.proxy.root(RESULT_DESCRIPTION))
	}

    pub fn fee_color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(RESULT_FEE_COLOR))
	}

    pub fn max_blob_size(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(RESULT_MAX_BLOB_SIZE))
	}

    pub fn max_event_size(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.proxy.root(RESULT_MAX_EVENT_SIZE))
	}

    pub fn max_events_per_req(&self) -> ScImmutableInt16 {
		ScImmutableInt16::new(self.proxy.root(RESULT_MAX_EVENTS_PER_REQ))
	}
}

#[derive(Clone)]
pub struct MutableGetChainInfoResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetChainInfoResults {
    pub fn chain_id(&self) -> ScMutableChainID {
		ScMutableChainID::new(self.proxy.root(RESULT_CHAIN_ID))
	}

    pub fn chain_owner_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(RESULT_CHAIN_OWNER_ID))
	}

    pub fn default_owner_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(RESULT_DEFAULT_OWNER_FEE))
	}

    pub fn default_validator_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(RESULT_DEFAULT_VALIDATOR_FEE))
	}

    pub fn description(&self) -> ScMutableString {
		ScMutableString::new(self.proxy.root(RESULT_DESCRIPTION))
	}

    pub fn fee_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(RESULT_FEE_COLOR))
	}

    pub fn max_blob_size(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(RESULT_MAX_BLOB_SIZE))
	}

    pub fn max_event_size(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.proxy.root(RESULT_MAX_EVENT_SIZE))
	}

    pub fn max_events_per_req(&self) -> ScMutableInt16 {
		ScMutableInt16::new(self.proxy.root(RESULT_MAX_EVENTS_PER_REQ))
	}
}

#[derive(Clone)]
pub struct ImmutableGetFeeInfoResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetFeeInfoResults {
    pub fn fee_color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(RESULT_FEE_COLOR))
	}

    pub fn owner_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(RESULT_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(RESULT_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct MutableGetFeeInfoResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetFeeInfoResults {
    pub fn fee_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(RESULT_FEE_COLOR))
	}

    pub fn owner_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(RESULT_OWNER_FEE))
	}

    pub fn validator_fee(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(RESULT_VALIDATOR_FEE))
	}
}

#[derive(Clone)]
pub struct ImmutableGetMaxBlobSizeResults {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetMaxBlobSizeResults {
    pub fn max_blob_size(&self) -> ScImmutableInt32 {
		ScImmutableInt32::new(self.proxy.root(RESULT_MAX_BLOB_SIZE))
	}
}

#[derive(Clone)]
pub struct MutableGetMaxBlobSizeResults {
	pub(crate) proxy: Proxy,
}

impl MutableGetMaxBlobSizeResults {
    pub fn max_blob_size(&self) -> ScMutableInt32 {
		ScMutableInt32::new(self.proxy.root(RESULT_MAX_BLOB_SIZE))
	}
}
