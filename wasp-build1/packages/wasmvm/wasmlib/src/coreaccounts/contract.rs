// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]

use crate::coreaccounts::*;
use crate::*;

pub struct DepositCall {
	pub func: ScFunc,
	pub params: MutableDepositParams,
}

pub struct HarvestCall {
	pub func: ScFunc,
	pub params: MutableHarvestParams,
}

pub struct WithdrawCall {
	pub func: ScFunc,
}

pub struct AccountsCall {
	pub func: ScView,
	pub results: ImmutableAccountsResults,
}

pub struct BalanceCall {
	pub func: ScView,
	pub params: MutableBalanceParams,
	pub results: ImmutableBalanceResults,
}

pub struct GetAccountNonceCall {
	pub func: ScView,
	pub params: MutableGetAccountNonceParams,
	pub results: ImmutableGetAccountNonceResults,
}

pub struct TotalAssetsCall {
	pub func: ScView,
	pub results: ImmutableTotalAssetsResults,
}

pub struct ScFuncs {
}

impl ScFuncs {
    pub fn deposit(_ctx: &dyn ScFuncCallContext) -> DepositCall {
        let mut f = DepositCall {
            func: ScFunc::new(HSC_NAME, HFUNC_DEPOSIT),
            params: MutableDepositParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn harvest(_ctx: &dyn ScFuncCallContext) -> HarvestCall {
        let mut f = HarvestCall {
            func: ScFunc::new(HSC_NAME, HFUNC_HARVEST),
            params: MutableHarvestParams { proxy: Proxy::nil() },
        };
        ScFunc::link_params(&mut f.params.proxy, &f.func);
        f
    }

    pub fn withdraw(_ctx: &dyn ScFuncCallContext) -> WithdrawCall {
        WithdrawCall {
            func: ScFunc::new(HSC_NAME, HFUNC_WITHDRAW),
        }
    }

    pub fn accounts(_ctx: &dyn ScViewCallContext) -> AccountsCall {
        let mut f = AccountsCall {
            func: ScView::new(HSC_NAME, HVIEW_ACCOUNTS),
            results: ImmutableAccountsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn balance(_ctx: &dyn ScViewCallContext) -> BalanceCall {
        let mut f = BalanceCall {
            func: ScView::new(HSC_NAME, HVIEW_BALANCE),
            params: MutableBalanceParams { proxy: Proxy::nil() },
            results: ImmutableBalanceResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn get_account_nonce(_ctx: &dyn ScViewCallContext) -> GetAccountNonceCall {
        let mut f = GetAccountNonceCall {
            func: ScView::new(HSC_NAME, HVIEW_GET_ACCOUNT_NONCE),
            params: MutableGetAccountNonceParams { proxy: Proxy::nil() },
            results: ImmutableGetAccountNonceResults { proxy: Proxy::nil() },
        };
        ScView::link_params(&mut f.params.proxy, &f.func);
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }

    pub fn total_assets(_ctx: &dyn ScViewCallContext) -> TotalAssetsCall {
        let mut f = TotalAssetsCall {
            func: ScView::new(HSC_NAME, HVIEW_TOTAL_ASSETS),
            results: ImmutableTotalAssetsResults { proxy: Proxy::nil() },
        };
        ScView::link_results(&mut f.results.proxy, &f.func);
        f
    }
}
