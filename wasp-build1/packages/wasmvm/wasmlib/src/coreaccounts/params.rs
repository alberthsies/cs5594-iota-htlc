// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

#![allow(dead_code)]
#![allow(unused_imports)]

use crate::coreaccounts::*;
use crate::*;

#[derive(Clone)]
pub struct ImmutableDepositParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableDepositParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct MutableDepositParams {
	pub(crate) proxy: Proxy,
}

impl MutableDepositParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableHarvestParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableHarvestParams {
    pub fn withdraw_amount(&self) -> ScImmutableInt64 {
		ScImmutableInt64::new(self.proxy.root(PARAM_WITHDRAW_AMOUNT))
	}

    pub fn withdraw_color(&self) -> ScImmutableColor {
		ScImmutableColor::new(self.proxy.root(PARAM_WITHDRAW_COLOR))
	}
}

#[derive(Clone)]
pub struct MutableHarvestParams {
	pub(crate) proxy: Proxy,
}

impl MutableHarvestParams {
    pub fn withdraw_amount(&self) -> ScMutableInt64 {
		ScMutableInt64::new(self.proxy.root(PARAM_WITHDRAW_AMOUNT))
	}

    pub fn withdraw_color(&self) -> ScMutableColor {
		ScMutableColor::new(self.proxy.root(PARAM_WITHDRAW_COLOR))
	}
}

#[derive(Clone)]
pub struct ImmutableBalanceParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableBalanceParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct MutableBalanceParams {
	pub(crate) proxy: Proxy,
}

impl MutableBalanceParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct ImmutableGetAccountNonceParams {
	pub(crate) proxy: Proxy,
}

impl ImmutableGetAccountNonceParams {
    pub fn agent_id(&self) -> ScImmutableAgentID {
		ScImmutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}

#[derive(Clone)]
pub struct MutableGetAccountNonceParams {
	pub(crate) proxy: Proxy,
}

impl MutableGetAccountNonceParams {
    pub fn agent_id(&self) -> ScMutableAgentID {
		ScMutableAgentID::new(self.proxy.root(PARAM_AGENT_ID))
	}
}
