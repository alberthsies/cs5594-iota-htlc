// Copyright 2020 IOTA Stiftung
// SPDX-License-Identifier: Apache-2.0

// (Re-)generated by schema tool
// >>>> DO NOT CHANGE THIS FILE! <<<<
// Change the json schema instead

import * as wasmlib from "wasmlib";
import * as sc from "./index";

export class AddAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncAddAllowedStateControllerAddress);
	params: sc.MutableAddAllowedStateControllerAddressParams = new sc.MutableAddAllowedStateControllerAddressParams(wasmlib.ScView.nilProxy);
}

export class ClaimChainOwnershipCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncClaimChainOwnership);
}

export class DelegateChainOwnershipCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncDelegateChainOwnership);
	params: sc.MutableDelegateChainOwnershipParams = new sc.MutableDelegateChainOwnershipParams(wasmlib.ScView.nilProxy);
}

export class RemoveAllowedStateControllerAddressCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRemoveAllowedStateControllerAddress);
	params: sc.MutableRemoveAllowedStateControllerAddressParams = new sc.MutableRemoveAllowedStateControllerAddressParams(wasmlib.ScView.nilProxy);
}

export class RotateStateControllerCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncRotateStateController);
	params: sc.MutableRotateStateControllerParams = new sc.MutableRotateStateControllerParams(wasmlib.ScView.nilProxy);
}

export class SetChainInfoCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetChainInfo);
	params: sc.MutableSetChainInfoParams = new sc.MutableSetChainInfoParams(wasmlib.ScView.nilProxy);
}

export class SetContractFeeCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetContractFee);
	params: sc.MutableSetContractFeeParams = new sc.MutableSetContractFeeParams(wasmlib.ScView.nilProxy);
}

export class SetDefaultFeeCall {
	func: wasmlib.ScFunc = new wasmlib.ScFunc(sc.HScName, sc.HFuncSetDefaultFee);
	params: sc.MutableSetDefaultFeeParams = new sc.MutableSetDefaultFeeParams(wasmlib.ScView.nilProxy);
}

export class GetAllowedStateControllerAddressesCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetAllowedStateControllerAddresses);
	results: sc.ImmutableGetAllowedStateControllerAddressesResults = new sc.ImmutableGetAllowedStateControllerAddressesResults(wasmlib.ScView.nilProxy);
}

export class GetChainInfoCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetChainInfo);
	results: sc.ImmutableGetChainInfoResults = new sc.ImmutableGetChainInfoResults(wasmlib.ScView.nilProxy);
}

export class GetFeeInfoCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetFeeInfo);
	params: sc.MutableGetFeeInfoParams = new sc.MutableGetFeeInfoParams(wasmlib.ScView.nilProxy);
	results: sc.ImmutableGetFeeInfoResults = new sc.ImmutableGetFeeInfoResults(wasmlib.ScView.nilProxy);
}

export class GetMaxBlobSizeCall {
	func: wasmlib.ScView = new wasmlib.ScView(sc.HScName, sc.HViewGetMaxBlobSize);
	results: sc.ImmutableGetMaxBlobSizeResults = new sc.ImmutableGetMaxBlobSizeResults(wasmlib.ScView.nilProxy);
}

export class ScFuncs {
	static addAllowedStateControllerAddress(_ctx: wasmlib.ScFuncCallContext): AddAllowedStateControllerAddressCall {
		const f = new AddAllowedStateControllerAddressCall();
		f.params = new sc.MutableAddAllowedStateControllerAddressParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static claimChainOwnership(_ctx: wasmlib.ScFuncCallContext): ClaimChainOwnershipCall {
		return new ClaimChainOwnershipCall();
	}

	static delegateChainOwnership(_ctx: wasmlib.ScFuncCallContext): DelegateChainOwnershipCall {
		const f = new DelegateChainOwnershipCall();
		f.params = new sc.MutableDelegateChainOwnershipParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static removeAllowedStateControllerAddress(_ctx: wasmlib.ScFuncCallContext): RemoveAllowedStateControllerAddressCall {
		const f = new RemoveAllowedStateControllerAddressCall();
		f.params = new sc.MutableRemoveAllowedStateControllerAddressParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static rotateStateController(_ctx: wasmlib.ScFuncCallContext): RotateStateControllerCall {
		const f = new RotateStateControllerCall();
		f.params = new sc.MutableRotateStateControllerParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setChainInfo(_ctx: wasmlib.ScFuncCallContext): SetChainInfoCall {
		const f = new SetChainInfoCall();
		f.params = new sc.MutableSetChainInfoParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setContractFee(_ctx: wasmlib.ScFuncCallContext): SetContractFeeCall {
		const f = new SetContractFeeCall();
		f.params = new sc.MutableSetContractFeeParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static setDefaultFee(_ctx: wasmlib.ScFuncCallContext): SetDefaultFeeCall {
		const f = new SetDefaultFeeCall();
		f.params = new sc.MutableSetDefaultFeeParams(wasmlib.newCallParamsProxy(f.func));
		return f;
	}

	static getAllowedStateControllerAddresses(_ctx: wasmlib.ScViewCallContext): GetAllowedStateControllerAddressesCall {
		const f = new GetAllowedStateControllerAddressesCall();
		f.results = new sc.ImmutableGetAllowedStateControllerAddressesResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getChainInfo(_ctx: wasmlib.ScViewCallContext): GetChainInfoCall {
		const f = new GetChainInfoCall();
		f.results = new sc.ImmutableGetChainInfoResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getFeeInfo(_ctx: wasmlib.ScViewCallContext): GetFeeInfoCall {
		const f = new GetFeeInfoCall();
		f.params = new sc.MutableGetFeeInfoParams(wasmlib.newCallParamsProxy(f.func));
		f.results = new sc.ImmutableGetFeeInfoResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}

	static getMaxBlobSize(_ctx: wasmlib.ScViewCallContext): GetMaxBlobSizeCall {
		const f = new GetMaxBlobSizeCall();
		f.results = new sc.ImmutableGetMaxBlobSizeResults(wasmlib.newCallResultsProxy(f.func));
		return f;
	}
}
